{"version":3,"sources":["dataProvider/index.js","breaches.js","dashboard/cardWelcome.js","dashboard/cardChart.js","dashboard/cardHelpWanted.js","dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["dataCounts","data","k","transformed","x","reduce","acc","val","undefined","Object","keys","forEach","key","push","transformMissingInt","breach","hasOwnProperty","getType","v","indexOf","split","getAccessDescription","console","log","dataProvider","fakeDataProvider","motives","access","actor","years","breaches","month","toString","links","link","url","item","index","transformData","BreachFilter","props","Filter","TextInput","label","source","alwaysOn","BreachList","List","filters","bulkActions","sort","field","order","Datagrid","hasBulkActions","expand","TextField","BreachShow","Show","ArrayField","UrlField","Aside","style","width","variant","component","href","paddingRight","justifyContent","d","Date","BreachCreate","withStyles","inlineBlock","display","marginRight","classes","Create","title","aside","SimpleForm","saving","NumberInput","defaultValue","getFullYear","getMonth","validate","maxValue","LongTextInput","SelectInput","formClassName","choices","id","name","FormDataConsumer","formData","tags","actortype","actorname","JSON","stringify","enhance","compose","media","height","translate","marginBottom","type","subject","value","chartType","loader","rootProps","styles","flex","flexColumn","flexDirection","leftCol","rightCol","marginLeft","singleCol","marginTop","transformChartData","header","ar","totalBarChartData","inMillions","tempObj","breachObj","parseInt","returnObj","year","yearArray","attributeBarChartData","column","minYear","summarize","uniques","search","a","b","role","uniqueId","uniqueCount","length","Dashboard","state","GET_LIST","pagination","page","perPage","then","response","yearsCount","setState","yearsData","motivesCount","motiveData","accessCount","accessData","actorCount","actorData","accessByYearCount","accessByYearData","motiveByYearCount","motiveByYearData","actorByYearCount","actorByYearData","monthByYearCount","monthByYearData","costByYearData","costByYearChartData","usersByYearData","usersByYearChartData","this","Component","App","Admin","dashboard","Resource","list","create","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6f835a7.chunk.js","sourcesContent":["import fakeDataProvider from 'ra-data-fakerest';\nimport data from './security-breach-v1';\n\nfunction dataCounts(data, k, transformed) {\n    // Get unique counts\n    transformed[k]=[]\n    var x = data.reduce((acc, val) => {\n        acc[val] = acc[val] === undefined ? 1 : acc[val] += 1;\n        return acc;\n    }, {});\n    // Add counts to our key\n    Object.keys(x).forEach(function (key) {\n        transformed[k].push([key, x[key]])\n    });\n    return(transformed)\n}\n\nfunction transformMissingInt(breach, key){\n    // Handle missing keys gracefully\n    breach[key]=\"\"\n    if (breach['tags'].hasOwnProperty(key) && breach['tags'][key] !== 0 && breach['tags'][key] !== null) {\n            breach[key]=breach['tags'][key]\n    }\n    \n    return breach\n}\n\nfunction getType(v){\n    if (v.indexOf(\":\")){\n        var fields = v.split(\":\")\n        return fields[0]\n    }\n    return v\n}\n\nfunction getAccessDescription(data, val){\n    if(val === \"\"){\n        return \"?\"\n    }\n    if(val === \"?\"){\n        return val\n    }\n    if(data['initial-access'].hasOwnProperty(val)){\n        return data['initial-access'][val]['description']\n    }\n    else {\n        console.log('Unable to find definition for: ' + val)\n        return val\n    }\n}\n\n\nfunction transformData(data) {\n    // react-admin is finicky about it's data, need to massage it a little\n    var transformed = {};\n    // add our top level keys\n    transformed['breaches']=[];\n    // create some temporary variables\n    var motives = [];\n    var access = [];\n    var actor = [];\n    var years = [];\n    data.breaches.forEach(function(breach){\n        // Add a Start Date key so it's easier to display/sort in react-admin\n        var month = breach['month'];\n        if (breach['month'] < 10){\n            month = \"0\"+breach['month'].toString();\n        }\n        breach['Start Date'] = breach['year'].toString()+month\n\n        // Convert links to a format react-admin likes\n        var links = [];\n        breach.links.forEach(function(link){\n            links.push({url:link})\n        });\n        breach['links']=links;\n        transformed['breaches'].push(breach);\n\n        // Copy imperitive tags to top level so it's easier to sort in both react-admin and in the export\n        breach['actor']=breach['tags']['actor']\n        breach['motive']=breach['tags']['motive']\n        breach['initial-access']=breach['tags']['initial-access']\n        breach['initial-access-description']=getAccessDescription(data['tag-taxonomy'], breach['initial-access'])\n        // Gracefully handle some missing int tags\n        breach=transformMissingInt(breach, 'cost-usd')\n        breach=transformMissingInt(breach, 'impacted-user-count')\n\n        // Add data we want to graph on the dashboard\n        // Filter out unknowns, it tells a better story.\n        if(breach['tags']['initial-access'] !== \"?\"){\n            access.push(breach['tags']['initial-access']);\n        }\n        // Break down motive & actor to type, makes for a better graph/insight\n        if(breach['tags']['motive'] !== \"?\"){\n            motives.push(getType(breach['tags']['motive']));\n        }\n        // Actor\n        if(breach['tags']['actor'] !== \"?\"){\n            actor.push(getType(breach['tags']['actor']))\n        }\n        // Years\n        years.push(breach['year'])\n    });\n    transformed=dataCounts(years, 'years', transformed)\n    transformed=dataCounts(motives, 'motives', transformed)\n    transformed=dataCounts(access, 'access', transformed)\n    transformed=dataCounts(actor, 'actor', transformed)\n    // Access data needs an additional transformation\n    // ATT&CK:T1193 isn't apparent that it's attributed to \"Spearphishing Attachment\"\n    transformed['access'].forEach(function(item, index){\n        transformed['access'][index][0] = getAccessDescription(data['tag-taxonomy'], item[0])\n    });\n    console.log(transformed)\n    return(transformed);\n}\n\nconst dataProvider = fakeDataProvider(transformData(data));\nexport default dataProvider;\n","import React from 'react';\nimport {\n    Show,\n    Filter,\n    TextInput,\n    List,\n    Datagrid,\n    TextField,\n    ArrayField,\n    UrlField,\n    SimpleForm,\n    Create,\n    SelectInput,\n    LongTextInput,\n    NumberInput,\n    FormDataConsumer,\n    maxValue,\n} from 'react-admin';\nimport { Button, Card, CardActions, CardContent, Typography } from '@material-ui/core';\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\nimport HelpIcon from '@material-ui/icons/Help';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst inlineInputStyle = {\n    inlineBlock: { display: 'inline-flex', marginRight: '1rem' },\n};\n\nconst BreachFilter = (props) => (\n    <Filter {...props}>\n        <TextInput label=\"Search\" source=\"q\" alwaysOn />\n    </Filter>\n);\n\nexport const BreachList = props => (\n    <List {...props} filters={<BreachFilter />} bulkActions={false} sort={{ field: 'Start Date', order: 'DESC' }}>\n        <Datagrid hasBulkActions={false} expand={<BreachShow />}>\n            <TextField source=\"Start Date\" />\n            <TextField source=\"entity\" />\n            <TextField source=\"summary\" />\n            <TextField source=\"actor\"/>\n            <TextField source=\"initial-access\" label=\"Initial Access\"/>\n            <TextField source=\"motive\" label=\"Motive\"/>\n            <TextField source=\"impacted-user-count\" label=\"Impacted User Count\"/>\n            <TextField source=\"cost-usd\" label=\"USD Cost\"/>\n        </Datagrid>\n    </List>\n);\n\n\nexport const BreachShow = (props) => (\n    <Show {...props}>\n            <ArrayField source=\"links\">\n                <Datagrid>\n                    <UrlField source=\"url\" label=\"Links\"/>\n                </Datagrid>\n            </ArrayField>\n    </Show>\n);\n\nconst Aside = () => (\n    <div style={{ width: \"50%\", 'margin-left': '1em' }}>\n        <Card>\n            <CardContent>\n                <Typography variant=\"headline\" component=\"h2\">\n                    Adding new breach data, the simple way\n                </Typography>\n                <Typography component=\"p\" style={{ 'margin-top': '1em' }}>\n                    Submit a Github Issue in our project with a link to more information and a project contributor will review, classify, and add to our data set.\n                </Typography>\n                <Button href=\"https://github.com/ericalexanderorg/SecurityBreach/issues/new\" style={{ 'margin-top': '1em' }}>\n                    <NoteAddIcon style={{ paddingRight: '0.5em' }} />\n                    Github Issue\n                </Button>\n            </CardContent>\n        </Card>\n        <Card style={{ 'margin-top': '1em' }}>\n            <CardContent>\n                <Typography variant=\"headline\" component=\"h2\">\n                    Adding new breach data, with more information.\n                </Typography>\n                <Typography component=\"p\" style={{ 'margin-top': '1em' }}>\n                    Use this form to generate breach data in json format and add it to the dataset by either submiting an issue or a pr.\n                </Typography>\n                <CardActions style={{ justifyContent: 'flex-start' }}>\n                    <Button href=\"https://github.com/ericalexanderorg/SecurityBreach/issues/new\" style={{ 'margin-top': '1em' }}>\n                        <NoteAddIcon style={{ paddingRight: '0.5em' }} />\n                        Github Issue\n                    </Button>\n                    <Button href=\"https://github.com/PointCloudLibrary/pcl/wiki/A-step-by-step-guide-on-preparing-and-submitting-a-pull-request\">\n                        <HelpIcon style={{ paddingRight: '0.5em' }} />\n                        How to submit a pull request (PR)\n                    </Button>\n                </CardActions>\n            </CardContent>\n        </Card>\n    </div>\n)\n\nvar d = new Date();\n\n// TODO:\n// * Need to figure out how to dynamically pull the motive tags from the dataset. This is a hack till then. \nexport const BreachCreate = withStyles(inlineInputStyle)(({ classes, ...props }) => (\n    <Create title={'Add new breach data'} aside={<Aside />} {...props}>\n        <SimpleForm saving={true}>\n            <NumberInput source=\"year\" label=\"Start Year\" defaultValue={d.getFullYear()} />\n            <NumberInput source=\"month\" label=\"Start Month\" defaultValue={d.getMonth()} validate={maxValue(12)} />\n            <TextInput source=\"entity\" defaultValue={\"Who was breached?\"} />\n            <LongTextInput source=\"summary\" defaultValue={\"Short summary of what happened\"} />\n            <SelectInput source=\"tags.actortype\" formClassName={classes.inlineBlock} choices={[\n                { id: 'Nation State:China', name: 'Speculation that it was the Chinese government' },\n                { id: 'Nation State', name: 'Misc Nation State entity' },\n                { id: 'Criminal:MageCart', name: 'Speculation the entity was one or more MageCart teams' },\n                { id: 'Criminal:SamSam', name: 'SamSam' },\n                { id: 'Criminal:BEC', name: 'Speculation the entity is one or more BEC teams. Commonly operating out of an African country' },\n                { id: 'Criminal', name: 'Misc criminal entity' },\n                { id: 'Hacktivist', name: 'Misc hacktivist entity' },\n                { id: 'Insider', name: 'Insider' },\n                { id: '?', name: 'Unknown' }\n            ]} />\n            <FormDataConsumer formClassName={classes.inlineBlock}>\n                {({ formData, ...rest }) => (formData.tags &&  formData.tags.actortype && formData.tags.actortype === 'Hacktivist') &&\n                    <TextInput source=\"tags.actorname\" defaultValue={\"Actor name\"}/>\n                }\n            </FormDataConsumer>\n\n            <SelectInput source=\"tags.initial-access\" choices={[\n                { id: 'ATT&CK:T1078', name: 'ATT&CK:T1078: Valid Accounts' },\n                { id: 'ATT&CK:T1192', name: 'ATT&CK:T1192: Spearphishing Link' },\n                { id: 'ATT&CK:T1193', name: 'ATT&CK:T1193: Spearphishing Attachment' },\n                { id: 'ATT&CK:T1200', name: 'ATT&CK:T1200: Hardware Additions' },\n                { id: 'ATT&CK:T1326', name: 'ATT&CK:T1326: Domain Registration Hijacking is the act of changing the registration of a domain name without the permission of the original registrant.' },\n                { id: 'ATT&CK:T1499', name: 'ATT&CK:T1499: Endpoint Denial of Service' },\n                { id: 'ATT&CK:T1451', name: 'ATT&CK:T1451: SIM Card Swap' },\n                { id: 'CIS: Control 1', name: 'CIS: Control 1: Lack of hardware inventory' },\n                { id: 'OWASP:A1', name: 'OWASP:A1: Injection' },\n                { id: 'OWASP:A2', name: 'OWASP:A2: Broken Authentication and Session Management' },\n                { id: 'OWASP:A5', name: 'OWASP:A5: Broken Access Control' },\n                { id: 'OWASP:A6', name: 'OWASP:A6: Security Misconfiguration' },\n                { id: 'OWASP:A9', name: 'OWASP:A9: Using Components with Known Vulerabilities' },\n                { id: 'OWASP:A10', name: 'OWASP:A10: Insufficient Logging & Monitoring' },\n                { id: 'BEC:Impersonation', name: 'BEC:Impersonation: Attacker poses as a trusted entity and requests an action to be taken that leads to monetary loss' },\n                { id: 'BGP Hijack', name: 'BGP Hijack: Trafic re-routed through unauthorized BGP advertisements' },\n                { id: 'Insider', name: 'Insider misused authorized access.' },\n                { id: '?', name: 'Unknown' }\n            ]} />\n            <SelectInput source=\"tags.motive\" choices={[\n                { id: 'Espionage', name: 'Espionage: Nation state or business stealing information for espionage purposes' },\n                { id: 'Hacktivism:Press', name: 'Hacktivism:Press: Associated press benefited the whistleblower' },\n                { id: 'Hacktivism:Schadenfreude', name: 'Hacktivism:Schadenfreude: Associated press did not benefit the whistleblower but shamed the exploited entity' },\n                { id: 'Hacktivism:?', name: 'Hacktivism:?: Motivation unknown. The event neither clearly benefited the exploiter nor shamed the exploited entity' },\n                { id: 'Money:Bank Transfer', name: 'Money:Bank Transfer: Money was stolen through a bank transer' },\n                { id: 'Money:Credit Card', name: 'Money:Credit Card: Money was stolen through credit card transactions' },\n                { id: 'Money:Cryptocurrency', name: 'Money:Cryptocurrency: Money was stolen through Cryptocurrency transactions' },\n                { id: 'Money:Ransom', name: 'Money:Ransom: Money was stolen through ransom' },\n                { id: 'Money:Sale on dark web', name: 'Money:Sale on dark web: The data was put on sale on the dark web' },\n                { id: 'Money:Misc', name: 'Money:Misc: Catch all for any type of finanically motivated breach' },\n                { id: 'PII:?', name: 'PII:?: PII was stolen for unknown reasons' },\n                { id: 'Political', name: 'Political: Nation State acting for political purposes.' },\n                { id: '?', name: 'Unknown' }\n            ]} />\n            <NumberInput source=\"tags.impacted-user-count\" defaultValue={0} />\n            <NumberInput source=\"tags.cost-usd\" defaultValue={0} />\n            <LongTextInput source=\"links.0\" defaultValue={\"Link to reference\"} />\n            <FormDataConsumer>\n                {({ formData, ...rest }) => {\n                    if (formData.tags && formData.tags.actortype && formData.tags.actorname){\n                        formData.tags.actor = formData.tags.actortype+\":\"+formData.tags.actorname\n                    } else if (formData.tags && formData.tags.actortype){\n                        formData.tags.actor = formData.tags.actortype\n                    }\n                    function remover(name, val) {\n                        if ( name === 'actortype' || name === 'actorname') { \n                            return undefined; // remove from result\n                        } else {\n                            return val; // return unchanged\n                        }\n                    }\n                    \n                    return (\n                        <Typography component=\"pre\" style={{ 'margin-top': '1em' }}>\n                            {JSON.stringify(formData, remover, 4)}\n                        </Typography>\n                    )\n                }\n                }\n            </FormDataConsumer>\n        </SimpleForm>\n    </Create>\n));\n","import React from 'react';\nimport compose from 'recompose/compose';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CodeIcon from '@material-ui/icons/Code';\nimport HelpIcon from '@material-ui/icons/Help';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport ExploreIcon from '@material-ui/icons/Explore';\nimport { withStyles } from '@material-ui/core/styles';\nimport { translate } from 'react-admin';\n\nconst styles = {\n    media: {\n        height: '18em',\n    },\n};\n\n\nconst CardWelcome = ({ classes, translate }) => (\n    <Card>\n        <CardContent>\n            <Typography variant=\"headline\" component=\"h1\">\n                SecurityBreach\n            </Typography>\n            <Typography component=\"p\">\n                This is a catalog of crowd sourced security breach data. Anyone can edit this data through GitHub or use this data in any way they'd like.\n            </Typography>\n        </CardContent>\n        <CardActions style={{ justifyContent: 'flex-start' }}>\n            <Button href=\"#/breaches\">\n                <ExploreIcon style={{ paddingRight: '0.5em' }} />\n                Explore This Data\n            </Button>\n            <Button href=\"https://github.com/ericalexanderorg/SecurityBreach\">\n                <CodeIcon style={{ paddingRight: '0.5em' }} />\n                Edit This Data\n            </Button>\n            <Button href=\"https://github.com/ericalexanderorg/SecurityBreach\">\n                <HelpIcon style={{ paddingRight: '0.5em' }} />\n                More Information\n            </Button>\n            <Button href=\"https://github.com/ericalexanderorg/SecurityBreach/tree/master/DATA/BREACHES/V1\">\n                <DescriptionIcon style={{ paddingRight: '0.5em' }} />\n                Raw Data\n            </Button>\n        </CardActions>\n    </Card>\n);\n\nconst enhance = compose(\n    withStyles(styles),\n    translate\n);\n\nexport default enhance(CardWelcome);","import React from 'react';\nimport compose from 'recompose/compose';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport { translate } from 'react-admin';\nimport {Chart} from 'react-google-charts';\n\nconst styles = {\n    media: {\n        height: '18em',\n    },\n    marginBottom: '2em',\n};\n\nconst CardChart = ({ type, title, subject, value }) => (\n    <Card>\n        <CardContent>\n            <Typography variant=\"headline\" component=\"h2\">\n                {title}\n            </Typography>\n            <Typography component=\"p\">\n                {subject}\n            </Typography>\n            <Chart\n                width={'100%'}\n                height={'400px'}\n                chartType={type}\n                loader={<div>Loading Chart</div>}\n                data={value}\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </CardContent>\n    </Card>\n);\n\nconst enhance = compose(\n    withStyles(styles),\n    translate\n);\n\nexport default enhance(CardChart);","import React from 'react';\nimport compose from 'recompose/compose';\nimport { translate } from 'react-admin';\nimport { Button, Card, CardActions, CardContent, withStyles, Typography } from '@material-ui/core';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport RateReview from '@material-ui/icons/RateReview';\n\nconst styles = {\n    media: {\n        height: '18em',\n    },\n};\n\n\nconst CardWelcome = ({ classes, translate }) => (\n    <Card>\n        <CardContent>\n            <Typography variant=\"headline\" component=\"h3\">\n                Help Wanted\n            </Typography>\n            <Typography component=\"p\">\n                Submit a breach or help categorize a breach we've collected in our intake queue.\n            </Typography>\n        </CardContent>\n        <CardActions style={{ justifyContent: 'flex-start' }}>\n            <Button href=\"https://github.com/ericalexanderorg/SecurityBreach/issues/new\" >\n                <AddCircle style={{ paddingRight: '0.5em' }} />\n                Add a Breach\n            </Button>\n            <Button href=\"https://github.com/ericalexanderorg/SecurityBreach/issues?q=is%3Aissue+is%3Aopen+label%3Aintake\">\n                <RateReview style={{ paddingRight: '0.5em' }} />\n                Help Classify a Breach\n            </Button>\n        </CardActions>\n    </Card>\n);\n\nconst enhance = compose(\n    withStyles(styles),\n    translate\n);\n\nexport default enhance(CardWelcome);","import React, { Component } from 'react';\nimport { GET_LIST } from 'react-admin';\nimport dataProvider from '../dataProvider';\nimport CardWelcome from './cardWelcome';\nimport CardChart from './cardChart';\nimport HelpWanted from './cardHelpWanted'\n\nconst styles = {\n    flex: { display: 'flex' },\n    flexColumn: { display: 'flex', flexDirection: 'column' },\n    leftCol: { flex: 1, marginRight: '1em' },\n    rightCol: { flex: 1, marginLeft: '1em' },\n    singleCol: { marginTop: '2em', marginBottom: '2em' },\n};\n\nfunction transformChartData(header, data){\n    var ar = []\n    ar.push(header)\n    Object.keys(data).forEach(function (key) {\n        ar.push([ data[key][0], data[key][1] ])\n    });\n    return ar\n}\n\nfunction isInArray(array, search)\n{\n    return array.indexOf(search) >= 0;\n}\n\nfunction totalBarChartData(key, data, inMillions=false){\n    var tempObj = {}\n    // Loop through all breach data\n    Object.keys(data).forEach(function (id) {\n        // Create a variable for or array id. Makes the code cleaner. \n        var breachObj = data[id]\n        // Check if we already have this year in our tempObj\n        if (!tempObj.hasOwnProperty(breachObj['year'])) {\n            // Not there, add it.\n            tempObj[breachObj['year']] = 0\n        }\n        if(data[id][key] !== \"\"){\n            tempObj[breachObj['year']] = tempObj[breachObj['year']] + parseInt(data[id][key])\n        }\n    });\n    \n    // Create the object we'll return\n    var returnObj = []\n    // Loop through each year in tempObj\n    Object.keys(tempObj).forEach(function (year) {\n        var yearArray = []\n        if(tempObj[year] !== 0){\n            if(inMillions){\n                yearArray = [year, tempObj[year]/1000000]\n            }\n            else {\n                yearArray = [year, tempObj[year]]\n            }\n            returnObj.push(yearArray)\n        }\n    });\n    return returnObj\n}\n\nfunction attributeBarChartData(column, data, minYear, summarize){\n    // Google doc on bar charts: https://developers.google.com/chart/interactive/docs/gallery/barchart\n    // react-google-charts doc on bar charts: https://react-google-charts.com/bar-chart\n\n    // uniques array holds our unique column values\n    var uniques = [column]\n\n    // tempObj is used to store data temporarily, as the name implies\n    var tempObj = {}\n\n    // Loop through all breach data\n    Object.keys(data).forEach(function (id) {\n        // Validate this year exceeds our minimum year (we don't want too many years in some graphs)\n        if(data[id]['year'] >= minYear){\n            // Use a var instead of data[id], easier to read the code\n            var breachObj = data[id]\n            // Exclude ? and undefined values\n            if(breachObj[column] === \"?\" || breachObj[column] === undefined){\n                return\n            }\n            // Use a var instead of breachObj[column], easier to read the code\n            var val = breachObj[column]\n            // Convert numbers to strings\n            if(typeof val == 'number'){\n                val = val.toString()\n            }\n            // Some data has first:second order data and sometimes we only want the first order data\n            if(summarize){\n                var components = breachObj[column].split(':')\n                val = components[0]\n            }\n            // Add this column value if it's not already in our uniques array\n            if(!isInArray(uniques, val)){\n                uniques.push(val)\n            }\n            // Check if we already have this year in our tempObj\n            if (!tempObj.hasOwnProperty(breachObj['year'])) {\n                // Not there, add it.\n                tempObj[breachObj['year']] = []\n            }\n            // Append this value to our year array in tempObj\n            tempObj[breachObj['year']].push(val)\n        }\n    });\n    // Create the object we'll return\n    var returnObj = []\n    // Sort our uniques so data is sorted in the graph\n    uniques.sort((a, b) => a - b);\n    uniques.push({ role: 'annotation' })\n    // Add the uniques list first. It's our header value. \n    returnObj.push(uniques)\n    // Loop through each year in tempObj\n    Object.keys(tempObj).forEach(function (year) {\n        // Create the array we'll append to returnObj\n        var yearArray = [year]\n        // Count each unique in the year\n        for(var uniqueId in uniques){\n            var uniqueCount = 0\n            // Skip over first and last value - Google Chart specific data\n            if(uniqueId > 0 && uniqueId < uniques.length-1){\n                for(var item in tempObj[year]){\n                    if(tempObj[year][item] === uniques[uniqueId]){\n                        ++uniqueCount\n                    }\n                }\n                yearArray.push(uniqueCount)\n            }\n        }\n        // Last value has to be an empty string\n        yearArray.push('')\n        returnObj.push(yearArray)\n    });\n\n    return returnObj\n}\n\n\n\nclass DashboardComponent extends Component {\n    state = {};\n\n    componentDidMount() {\n        dataProvider(GET_LIST, 'years', {\n            sort: { field: 'name', order: 'DESC' },\n            pagination: { page: 1, perPage: 1000 },\n            })\n            .then(response => response.data)\n            .then(yearsCount => {\n                this.setState({ yearsData: transformChartData(['Years', 'Count'], yearsCount) })\n                }\n            )\n        dataProvider(GET_LIST, 'motives', {\n            sort: { field: 'name', order: 'DESC' },\n            pagination: { page: 1, perPage: 1000 },\n            })\n            .then(response => response.data)\n            .then(motivesCount => {\n                this.setState({ motiveData: transformChartData(['Motive', 'Count'], motivesCount) })\n                }\n            )\n        dataProvider(GET_LIST, 'access', {\n            sort: { field: 'name', order: 'DESC' },\n            pagination: { page: 1, perPage: 1000 },\n            })\n            .then(response => response.data)\n            .then(accessCount => {\n                this.setState({ accessData: transformChartData(['Access', 'Count'], accessCount) })\n                }\n            )\n        dataProvider(GET_LIST, 'actor', {\n            sort: { field: 'name', order: 'DESC' },\n            pagination: { page: 1, perPage: 1000 },\n            })\n            .then(response => response.data)\n            .then(actorCount => {\n                this.setState({ actorData: transformChartData(['Actor', 'Count'], actorCount) })\n                }\n            )\n        \n        // Get access by year data\n        dataProvider(GET_LIST, 'breaches', {\n            sort: { field: 'name', order: 'DESC' },\n            pagination: { page: 1, perPage: 1000 },\n            })\n            .then(response => response.data)\n            .then(accessByYearCount => {\n                this.setState({ accessByYearData: attributeBarChartData('initial-access-description', accessByYearCount, 2018, false) })\n                }\n            )\n\n        // Get motive by year data\n        dataProvider(GET_LIST, 'breaches', {\n            sort: { field: 'name', order: 'DESC' },\n            pagination: { page: 1, perPage: 1000 },\n            })\n            .then(response => response.data)\n            .then(motiveByYearCount => {\n                this.setState({ motiveByYearData: attributeBarChartData('motive', motiveByYearCount, 2018, false) })\n                }\n            ) \n\n        // Get actor by year data\n        dataProvider(GET_LIST, 'breaches', {\n            sort: { field: 'name', order: 'DESC' },\n            pagination: { page: 1, perPage: 1000 },\n            })\n            .then(response => response.data)\n            .then(actorByYearCount => {\n                this.setState({ actorByYearData: attributeBarChartData('actor', actorByYearCount, 2018, true) })\n                }\n            ) \n\n        // Get month by year data\n        dataProvider(GET_LIST, 'breaches', {\n            sort: { field: 'name', order: 'DESC' },\n            pagination: { page: 1, perPage: 1000 },\n            })\n            .then(response => response.data)\n            .then(monthByYearCount => {\n                this.setState({ monthByYearData: attributeBarChartData('month', monthByYearCount, 1900, false) })\n                }\n            ) \n\n        // Get cost by year data\n        dataProvider(GET_LIST, 'breaches', {\n            sort: { field: 'name', order: 'DESC' },\n            pagination: { page: 1, perPage: 1000 },\n            })\n            .then(response => response.data)\n            .then(costByYearData => {\n                this.setState({ costByYearChartData: transformChartData(['Years', 'Cost in USD (Millions)'], totalBarChartData('cost-usd', costByYearData, true)) })\n                }\n            ) \n\n            // Get impacted uers per year\n            dataProvider(GET_LIST, 'breaches', {\n                sort: { field: 'name', order: 'DESC' },\n                pagination: { page: 1, perPage: 1000 },\n                })\n                .then(response => response.data)\n                .then(usersByYearData => {\n                    this.setState({ usersByYearChartData: transformChartData(['Years', 'User Count (Millions)'], totalBarChartData('impacted-user-count', usersByYearData, true)) })\n                    }\n                ) \n    }\n\n    render() {\n        const {\n            motiveData,\n            motiveByYearData,\n            accessData,\n            accessByYearData,\n            actorData,\n            actorByYearData,\n            yearsData,\n            monthByYearData, \n            costByYearChartData,\n            usersByYearChartData,\n        } = this.state; \n\n\n        return (\n            <div>\n                <div style={styles.flexColumn}>\n                    <div style={{ marginBottom: '2em' }}>\n                        <CardWelcome />\n                    </div>\n                    <div style={{ marginBottom: '2em' }}>\n                        <HelpWanted />\n                    </div>\n                    <div style={{marginBottom: '2em' }}>\n                        <CardChart type={'BarChart'} value={yearsData} title={'Years'} subject={'Breaches cataloged per year.'} />\n                    </div>\n                    <div style={{marginBottom: '2em' }}>\n                        <CardChart type={'Bar'} value={monthByYearData} title={'Month by Year'} subject={'Trends in activity per month.'} />\n                    </div>\n                    <div style={{marginBottom: '2em' }}>\n                        <CardChart type={'AreaChart'} value={costByYearChartData} title={'Cost by Year (in Millions)'} subject={'Total cost of breaches per year in USD.'} />\n                    </div>\n                    <div style={{marginBottom: '2em' }}>\n                        <CardChart type={'AreaChart'} value={usersByYearChartData} title={'Impacted Users by Year (in Millions)'} subject={'Total number of impacted users per year.'} />\n                    </div>\n                    <div style={{marginBottom: '2em' }}>\n                        <CardChart type={'PieChart'} value={accessData} title={'Access'} subject={'How did the actor gain initial access?'} />\n                    </div>\n                    <div style={{marginBottom: '2em' }}>\n                        <CardChart type={'Bar'} value={accessByYearData} title={'Access by Year (Last 3 Years)'} subject={'Access trends per year.'} />\n                    </div>\n                    <div style={{marginBottom: '2em' }}>\n                        <CardChart type={'PieChart'} value={motiveData} title={'Motive'} subject={'Why did the actor seek access?'} />\n                    </div> \n                    <div style={{marginBottom: '2em' }}>\n                        <CardChart type={'Bar'} value={motiveByYearData} title={'Motive by Year (Last 3 Years)'} subject={'Motive trends per year.'} />\n                    </div>\n                    <div style={{marginBottom: '2em' }}>\n                        <CardChart type={'PieChart'} value={actorData} title={'Actor'} subject={'Speculation and/or concensus on who the actor was?'} />\n                    </div> \n                    <div style={{marginBottom: '2em' }}>\n                        <CardChart type={'Bar'} value={actorByYearData} title={'Actor by Year (Last 3 Years)'} subject={'Actor trends per year.'} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport const Dashboard = DashboardComponent;","import React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport './App.css';\n\nimport dataProvider from './dataProvider';\nimport { BreachList, BreachCreate } from './breaches';\nimport { Dashboard } from './dashboard';\n\nconst App = () => (  \n  <Admin dashboard={Dashboard} title=\"SecurityBreach\" dataProvider={dataProvider}>\n      <Resource name=\"breaches\" list={BreachList} create={BreachCreate} />\n  </Admin>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}