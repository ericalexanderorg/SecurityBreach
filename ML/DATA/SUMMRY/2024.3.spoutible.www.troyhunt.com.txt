Last week, someone reached it to me with what they claimed was a Spoutible data breach obtained by exploiting an enumerable API. Just your classic case of putting someone else's username in the URL and getting back data about them, which at first glance I assumed was another scraping situation like we recently saw with Trello. The Spoutible API enabled any user to retrieve the bcrypt hash of any other user's password. For exactly the same reason breached services advise customers to change their passwords even when hashed with a strong algorithm, all Spoutible users are now in the same boat - change you password! Further, changing the password doesn't invalidate existing sessions so as best as I can tell, if someone has successfully accessed someone else's Spoutible account there's no way to know and no way to boot them out again. A couple of months ago, Spoutible announced cross-posting to Mastodon and Bluesky and my own data does have a "Cross posting auth" node, albeit set to null. To be as charitable as possible to Spoutible, you could argue that this is largely just the one vulnerability that is the inadvertent exposure of internal data via a public API. This is data that has a legitimate purpose in their system and it may simply be a case of a framework automatically picking all entity attributes up from the data tier and returning them via the UI. But it's the circumstances that allowed this to happen and then exacerbated the problem when it did that concern me more; clearly there's been no security review around this feature because it was so easily discoverable, nor has been any thought put in to notifying people of potential account takeovers or providing them with the means to invalidate other sessions. Change your Spoutible password and change any other account you reused that password on.